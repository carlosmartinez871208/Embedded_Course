/*!
 * $File: Stm32f429zi_Ls.ld
 * $Revision: Version 1.0 $
 * $Author: Carlos Martinez $
 * $Date: 2025-08-03 $
 */

/* Entry point */
ENTRY(Reset_Handler)

/* Memory definitions: */
MEMORY
{
    FLASH (rx): ORIGIN = 0x08000000, LENGTH = 64K
    SRAM (rwx): ORIGIN = 0x20000000, LENGTH = 12K
}

/* From vector table (Reference manual page 202) 
** First element of the vector table is reserved.
*/
_estack = ORIGIN(SRAM) + LENGTH(SRAM);

/* Indicate required heap and stack size */
/* Generate a link error if heap and stack don't fit into RAM */
__max_heap_size  = 0x200;  /* 512 bytes */
__max_stack_size = 0x400; /* 1024 bytes or 1 Kb */

/* Sections */
SECTIONS
{
    /* The program code and other data goes into FLASH */
    .text :
    {
        . = ALIGN(4); /* This align memoery every 4 bytes  */
        _stext = .; /* '.' indicates contains the current output location counter and it is asigned to global symbol: _stext (start of text section) symbol. */
        __text_start__ = _stext;
        *(.isr_vector_table) /* Merge all '.isr_vector_table' sections of input files. */
        *(.text)             /* Merge all '.text' sections of inputs files. */
        *(.text.*)           /* Merge other .text sections generated by linker. */
        *(.init)             /* Merge.init sections in text */
        *(.fini)             /* Merge .fini sections in text */
        *(.ctors)            /* Merge all '.ctors' constructor input files */
        *(.dtors)            /* Merge all '.ctors' desstructor input files */
        *(.rodata)           /* Merge all '.rodata' sections of inputs files. */
        *(.rodata.*)         /* Merge other read only data generated by linker. */
        . = ALIGN(4); /* This align memoery every 4 bytes  */
        __text_end__ = .; /* '.' indicates contains the current output location counter and it is asigned to global symbol: __text_end__ (end of text section) symbol. */
    } > FLASH

    _etext = LOADADDR(.data); /* Assigns .data start address as end of text _etext */

    /* Initialized data sections goes into RAM, load LMA copy after code */
    .data :
    {
        . = ALIGN(4); /* This align memory every 4 bytes  */
        _sdata = .; /* '.' indicates contains the current output location counter and it is asigned to global symbol: _sdata (start of data section) symbol. */
        __data_start__ = _sdata;
        *(.data)    /* Merge all '.data' sections of inputs files. */
        *(.data.*) /* Merge other data section generated by linker. */
        . = ALIGN(4);
        _edata = .; /* '.' indicates contains the current output location counter and it is asigned to global symbol: _edata (end of data section) symbol. */
        __data_end__ = _edata;
    } > SRAM AT> FLASH /*> (VMA) AT> (LMA) */
                       /* Load memory (LMA) is flash and then the VMA is SRAM. */
                       /* 'AT>' tells the linker to load a SRAM data from flash where it is located. */

    /* Uninitilized data section */
    .bss :
    {
        . = ALIGN(4); /* This align memoery every 4 bytes  */
        _sbss = .; /* '.' indicates contains the current output location counter and it is asigned to global symbol: _sbss (start of bss section) symbol. */
        __bss_start__ = _sbss;
        *(.bss)    /* Merge all '.bss' sections of inputs files. */
        *(.bss.*) /* Merge other bss sections generated by linker */
        . = ALIGN(4); /* This align memoery every 4 bytes  */
        _ebss = .; /* '.' indicates contains the current output location counter and it is asigned to global symbol: _ebss (end of bss section) symbol. */
        __bss_end__ = _ebss;
        __end__ = .;
        end = .;
    } > SRAM
}